##########################################################################
# NSAp - Copyright (C) CEA, 2019
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################


# Imports
from pprint import pprint
import os
import argparse
import subprocess
import yaml

# Define command line
doc = """
Convert BIBTEX to MD.
Must install first pybtex.
python3 bib2md -i data/ciclops_v-20241021.bib -o ../_collections/_biblio/ciclops -c ciel -s ciclops
python3 bib2md -i data/midas_v-20241021.bib -o ../_collections/_biblio/midas -c ciel -s midas
python3 bib2md -i data/neurophysics_v-20241021.bib -o ../_collections/_biblio/neurophysics -c ciel -s neurophysics
"""
parser = argparse.ArgumentParser(description=doc)
parser.add_argument(
    "-i", "--infile",
    help="the input .bib file.")
parser.add_argument(
    "-o", "--outdir",
    help="the destination folder.")
parser.add_argument(
    "-c", "--cat",
    help="the category.")
parser.add_argument(
    "-s", "--subcat",
    help="the category.")
args = parser.parse_args()


# Create output directory
if not os.path.isdir(args.outdir):
    os.mkdir(args.outdir)


# Convert bib to yaml with pybtex-convert
bibfile = os.path.join(args.outdir, "bib.yaml")
cmd = ["pybtex-convert", args.infile,  bibfile]
subprocess.call(cmd)


# Load biblio
with open(bibfile, "rt") as of:
    biblio = yaml.safe_load(of)["entries"]


# Create single entries
for key, item in biblio.items():
    print("--", key)
    # pprint(item)
    key = key.replace(os.sep, "_")
    if "author" not in item or not "first" in item["author"][0]:
        continue
    item["author"] = "{0} {1} et al.".format(
        item["author"][0]["first"],
        item["author"][0]["last"])
    md_file = os.path.join(args.outdir, f"{args.subcat}_{key}.md")
    content = ["---", f"cat: {args.cat}", f"subcat: {args.subcat}",
               "bestof: false"]
    for _key in ["author", "title", "journal", "year", "type", "url", "doi",
                 "booktitle", "team"]:
        value = item.get(_key, None)
        if value is None:
            continue
        for char in ("\n", "{", "}", "\\'", '"'):
            value = value.replace(char, "")
        for char in (":", ):
            value = value.replace(char, " -")
        content.append(u"{0}: {1}".format(_key, value))
    content += ["---"]
    print(content)
    with open(md_file, "wt") as of:
        of.write("\n".join(content))
    

# Cleaning
os.remove(bibfile)
